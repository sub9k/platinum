local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("Fortnite simulator v1", "DarkTheme")

local EggTab = Window:NewTab("Egg Automation")
local EggSection = EggTab:NewSection("Made by kjzf")

local autoEgg = false
local selectedEggKeyword = "Egg"

if _G.AutoEggEnabled == nil then
    _G.AutoEggEnabled = false
end

local function notify(msg)
    pcall(function()
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Egg Automation",
            Text = msg,
            Duration = 2
        })
    end)
end

local function getBaseEggName(fullName)
    local baseName = fullName:match("^(.-)%s*x%d+$")
    return baseName or fullName
end

local function equipEggByKeyword(keyword)
    local player = game.Players.LocalPlayer
    local backpack = player:WaitForChild("Backpack")
    local character = player.Character or player.CharacterAdded:Wait()
    for _, tool in ipairs(backpack:GetChildren()) do
        if tool:IsA("Tool") and tool.Name:find(keyword) and not tool.Name:find("Easter Egg seed") then
            tool.Parent = character
            character:WaitForChild("Humanoid"):EquipTool(tool)
            return getBaseEggName(tool.Name)
        end
    end
    return nil
end

local function getEggs()
    local player = game.Players.LocalPlayer
    local backpack = player:WaitForChild("Backpack")
    local eggs, added = {}, {}
    for _, tool in ipairs(backpack:GetChildren()) do
        if tool:IsA("Tool") and tool.Name:find("Egg") and not tool.Name:find("Easter Egg seed") then
            local baseName = getBaseEggName(tool.Name)
            if not added[baseName] then
                table.insert(eggs, baseName)
                added[baseName] = true
            end
        end
    end
    return eggs
end

eggDropdown = EggSection:NewDropdown("Select Egg", "Select an egg to automate", getEggs(), function(option)
    selectedEggKeyword = option
end)
eggDropdown:Refresh(getEggs())

local autoNonFavoritedPets = false
local autoFavoriteKeywords = {}

local webhookUrl = nil
local pingKeyword = "Kitsune"

local function sendWebhook(message)
    if webhookUrl and message and message ~= "" then
        local http = game:GetService("HttpService")
        local payload = http:JSONEncode({
            content = message
        })
        request = request or http_request or (syn and syn.request) or (http and http.request)
        if request then
            request({
                Url = webhookUrl,
                Method = "POST",
                Headers = {["Content-Type"] = "application/json"},
                Body = payload
            })
        end
    end
end

EggSection:NewTextBox("Auto Favorite", "Enter keywords (comma separated) to favorite pets each loop", function(txt)
    autoFavoriteKeywords = {}
    for keyword in string.gmatch(txt, '([^,]+)') do
        table.insert(autoFavoriteKeywords, keyword:match("^%s*(.-)%s*$")) -- trim spaces
    end
end)

EggSection:NewTextBox("Discord Webhook", "Enter Discord Webhook URL or 'None'", function(txt)
    if txt:lower() == "none" then
        webhookUrl = nil
    else
        webhookUrl = txt
    end
end)

EggSection:NewTextBox("Ping Keyword", "Enter pet name keyword to ping for", function(txt)
    pingKeyword = txt
end)

local pingForGoodPets = false

EggSection:NewToggle("Ping for good pets", "Pings @everyone when you hatch the ping keyword", function(state)
    pingForGoodPets = state
end)

EggSection:NewToggle("Auto Sell Non-Favorited Pets", "Sells all non-favorited pets after egg automation loop", function(state)
    autoNonFavoritedPets = state
end)


EggSection:NewToggle("Run Egg Automation", "Equips and processes selected egg continuously", function(state)
    autoEgg = state
    _G.AutoEggEnabled = state -- save toggle state globally
    task.spawn(function()
        local failCount = 0
        while autoEgg do
            local equippedName = equipEggByKeyword(selectedEggKeyword)
            if not equippedName then
                failCount += 1
                notify("No egg tool found! Fail #" .. failCount)
                if failCount >= 2 then
                    notify("Failed twice â€” rejoining...")
                    task.wait(2)
                    local ts = game:GetService("TeleportService")
                    local plr = game.Players.LocalPlayer

                    -- make sure script reloads after rejoin
                    local scriptURL = "https://raw.githubusercontent.com/sub9k/platinum/refs/heads/main/gagm"
                    if syn and syn.queue_on_teleport then
                        syn.queue_on_teleport("loadstring(game:HttpGet('" .. scriptURL .. "'))()")
                    elseif queue_on_teleport then
                        queue_on_teleport("loadstring(game:HttpGet('" .. scriptURL .. "'))()")
                    end

                    ts:Teleport(game.PlaceId, plr)
                    return
                end
                task.wait(2)
            else
                failCount = 0
                notify("Equipped: " .. equippedName)

                -- ðŸ”¹ Create 8 eggs
                for _ = 1, 8 do
                    game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("PetEggService")
                        :FireServer("CreateEgg", Vector3.new(60.230186462402344, 0.1754859983921051, -112.32734680175781))
                    task.wait(0.1)
                end
                notify("Created 8 eggs")

                -- ðŸ”¹ Authorise eggs
                local farmPath = workspace:WaitForChild("Farm"):WaitForChild("Farm"):WaitForChild("Important"):WaitForChild("Objects_Physical")
                local petEggs = {}
                for _, obj in ipairs(farmPath:GetChildren()) do
                    if obj.Name == "PetEgg" then
                        table.insert(petEggs, obj)
                    end
                end
                for _, egg in ipairs(petEggs) do
                    game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("PetEggService"):FireServer("AuthorisePurchase", egg)
                    task.wait(0.1)
                end
                notify("Authorised " .. #petEggs .. " eggs")

                -- ðŸ”¹ Hatch eggs
                for _, egg in ipairs(petEggs) do
                    game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("PetEggService"):FireServer("HatchPet", egg)
                    task.wait(0.1)
                end
                notify("Hatched " .. #petEggs .. " eggs")

                -- wait for pets to spawn
                task.wait(6)

                -- ðŸ”¹ Auto Favorite pets
                if #autoFavoriteKeywords > 0 then
                    local player = game.Players.LocalPlayer
                    local backpack = player:WaitForChild("Backpack")
                    for _, pet in ipairs(backpack:GetChildren()) do
                        if pet:IsA("Tool") then
                            for _, keyword in ipairs(autoFavoriteKeywords) do
                                if pet.Name:find(keyword) then
                                    local isFavorited = pet:GetAttribute("d")
                                    if not isFavorited then
                                        game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Favorite_Item"):FireServer(pet)
                                    end
                                    break
                                end
                            end
                        end
                    end
                    task.wait(0.5)
                end

                -- ðŸ”¹ Ping webhook
                if pingForGoodPets and webhookUrl then
                    local player = game.Players.LocalPlayer
                    local backpack = player:WaitForChild("Backpack")
                    for _, pet in ipairs(backpack:GetChildren()) do
                        if pet:IsA("Tool") and pet.Name:find(pingKeyword) then
                            local kgMatch = pet.Name:match("%[(.-%s*KG)%]")
                            if kgMatch and lastPingedKg ~= kgMatch then
                                sendWebhook("@everyone You have hatched a **" .. pet.Name .. "**!")
                                lastPingedKg = kgMatch
                            end
                            break
                        end
                    end
                end

                -- ðŸ”¹ Auto Sell Non-Favorited Pets
                if autoNonFavoritedPets then
                    local player = game.Players.LocalPlayer
                    local backpack = player:FindFirstChild("Backpack")
                    local character = player.Character or player.CharacterAdded:Wait()
                    local petsToSell = {}
                    for _, item in ipairs(backpack:GetChildren()) do
                        if item:IsA("Tool") and string.find(item.Name, "Age") and not item:GetAttribute("d") then
                            table.insert(petsToSell, item)
                            item.Parent = character
                        end
                    end
                    task.wait(0.2)
                    local sellEvent = game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("SellPet_RE")
                    for _, pet in ipairs(petsToSell) do
                        sellEvent:FireServer(pet)
                    end
                    notify("Sold " .. #petsToSell .. " non-favorited pets")
                end

                task.wait(2.5)
            end
        end
        notify("Egg Automation stopped")
    end)
end)

local EventTab = Window:NewTab("Buy Event Items")
local EventSection = EventTab:NewSection("Select Item to Buy")

local shops = {
    ["Zen shop"] = {
        {name = "None"},
        {name = "Zen seed pack", buffer = "\n\000\000@\155\155\222\232A"},
        {name = "Zen egg", buffer = "\n\000\000\160n\156\222\232A"},
        {name = "Hot spring", buffer = "\n\000\000@[\155\222\232A"},
        {name = "Zen Sand", buffer = "\n\000\000 q\155\222\232A"},
        {name = "Zenflare", buffer = "\n\000\000\192\242\155\222\232A"},
        {name = "Zen Crate", buffer = "\n\000\000`l\153\222\232A"},
        {name = "Soft Sunshine", buffer = "\n\000\000@\204\155\222\232A"},
        {name = "Koi", buffer = "\n\000\000\160\170\156\222\232A"},
        {name = "Zen gnome crate", buffer = "\n\000\000\224\186\153\222\232A"},
        {name = "Spiked mango", buffer = "\n\000\000\128\016\156\222\232A"}
    },
    ["Blood shop"] = {
        {name = "None"},
        {name = "Mysterious Crate", buffer = "\n\000\000`\212g|\232A"},
        {name = "Blood Banana", buffer = "\n\000\000`\171h|\232A"},
        {name = "Moon Melon Seed", buffer = "\n\000\000\192\217h|\232A"},
        {name = "Star Caller", buffer = "\n\000\000\192\017i|\232A"},
        {name = "Blood HedgeHog", buffer = "\n\000\000\1609i|\232A"},
        {name = "Blood Kiwi", buffer = "\n\000\000\224\"i|\232A"},
        {name = "Blood Owl", buffer = "\n\000\000`Di|\232A"}
    },
    ["Night shop"] = {
        {name = "None"},
        {name = "Twilight Crate", buffer = "\n\000\000 \228o\135\232A"},
        {name = "Moon cat", buffer = "\n\000\000\192\209\132\135\232A"},
        {name = "Celestiberry", buffer = "\n\000\000`\139o\135\232A"},
        {name = "Moon Mango", buffer = "\n\000\000`_o\135\232A"}
    },
    ["Honey shop"] = {
        {name = "None"},
        {name = "Lavender Seed", buffer = "\n\000\000`G\031\153\232A"},
        {name = "Nectarshade Seed", buffer = "\n\000\000 -\031\153\232A"},
        {name = "Nectarine Seed", buffer = "\n\000\000\192C{\141\232A"},
        {name = "Hive Fruit seed", buffer = "\n\000\000`\234w\141\232A"},
        {name = "Pollen Radar", buffer = "\n\000\000\128_\031\153\232A"},
        {name = "Nectar Staff", buffer = "\n\000\000\160w\031\153\232A"},
        {name = "Honey Sprinkler", buffer = "\n\000\000\224\217x\141\232A"},
        {name = "Bee Egg", buffer = "\n\000\000\192]y\141\232A"},
        {name = "Bee Crate", buffer = "\n\000\000\160ux\141\232A"},
        {name = "Honey comb", buffer = "\n\000\000\224\137y\141\232A"},
        {name = "Bee Chair", buffer = "\n\000\000\224\157x\141\232A"},
        {name = "Honey torch", buffer = "\n\000\000`\005z\141\232A"},
        {name = "Honey walkway", buffer = "\n\000\000@\017y\141\232A"}
    }
}

local selectedItems = {
    ["Zen shop"] = "None",
    ["Blood shop"] = "None",
    ["Night shop"] = "None",
    ["Honey shop"] = "None"
}

local function getNames(shopItems)
    local names = {}
    for _, item in ipairs(shopItems) do
        table.insert(names, item.name)
    end
    return names
end

for shopName, itemList in pairs(shops) do
    EventSection:NewDropdown(shopName, "Select an item from " .. shopName, getNames(itemList), function(option)
        selectedItems[shopName] = option
    end)
end

EventSection:NewButton("Buy Selected Item", "Buys the selected item(s)", function()
    for shopName, itemName in pairs(selectedItems) do
        if itemName ~= "None" then
            for _, item in ipairs(shops[shopName]) do
                if item.name == itemName and item.buffer then
                    game:GetService("ReplicatedStorage"):WaitForChild("ByteNetReliable"):FireServer(buffer.fromstring(item.buffer))
                end
            end
        end
    end
end)

local EggBuyTab = Window:NewTab("Buy Egg")
local EggBuySection = EggBuyTab:NewSection("Select Egg to Buy")

local eggShop = {
    {name = "Zen Egg", buffer = "\n\000\000\160n\156\222\232A"},
    {name = "Bee Egg", buffer = "\n\000\000\192]y\141\232A"},
    {name = "Night Egg", buffer = "\n\000\000\224\2037t\232A"},
    {name = "Oasis Egg", buffer = "\n\000\000\1289\181\182\232A"},
    {name = "Common Egg", buffer = "\n\000\000\224\138\"i\232A"},
    {name = "Common Summer Egg", buffer = "\n\000\000\128\127+\173\232A"},
    {name = "Rare Summer Egg", buffer = "\n\000\000@\143+\173\232A"},
    {name = "Mythical Egg", buffer = "\n\000\000`\181\157|\232A"},
    {name = "Paradise Egg", buffer = "\n\000\000`\161+\173\232A"},
    {name = "Bug Egg", buffer = "\n\000\000\128\224aj\232A"}
}

local selectedEgg = "Zen Egg"

local function getEggNames()
    local names = {}
    for _, egg in ipairs(eggShop) do
        table.insert(names, egg.name)
    end
    return names
end

EggBuySection:NewDropdown("Select Egg", "Choose an egg to buy", getEggNames(), function(option)
    selectedEgg = option
end)

EggBuySection:NewButton("Buy Selected Egg", "Purchases the selected egg", function()
    for _, egg in ipairs(eggShop) do
        if egg.name == selectedEgg and egg.buffer then
            game:GetService("ReplicatedStorage"):WaitForChild("ByteNetReliable"):FireServer(buffer.fromstring(egg.buffer))
        end
    end
end)

local autoBuyEventItems, autoBuyEggs = false, false

EventSection:NewToggle("Auto Buy Event Items", "Continuously buy selected event items", function(state)
    autoBuyEventItems = state
    task.spawn(function()
        while autoBuyEventItems do
            for shopName, itemName in pairs(selectedItems) do
                if itemName ~= "None" then
                    for _, item in ipairs(shops[shopName]) do
                        if item.name == itemName and item.buffer then
                            game:GetService("ReplicatedStorage"):WaitForChild("ByteNetReliable"):FireServer(buffer.fromstring(item.buffer))
                        end
                    end
                end
            end
            task.wait(0.2)
        end
    end)
end)

EggBuySection:NewToggle("Auto Buy Egg", "Continuously buy selected egg", function(state)
    autoBuyEggs = state
    task.spawn(function()
        while autoBuyEggs do
            for _, egg in ipairs(eggShop) do
                if egg.name == selectedEgg and egg.buffer then
                    game:GetService("ReplicatedStorage"):WaitForChild("ByteNetReliable"):FireServer(buffer.fromstring(egg.buffer))
                end
            end
            task.wait(0.2)
        end
    end)
end)

local SellTab = Window:NewTab("Auto Sell")
local SellTabSection = SellTab:NewSection("Sell tab idk lol")

SellTabSection:NewButton("Sell Held Item", "Sells Item that you're currently holding", function()
    game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Sell_Item"):FireServer()
end)

SellTabSection:NewButton("Sell Inventory", "Sells Every fruit in ur inventory", function()
    game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Sell_Inventory"):FireServer()
end)

local AutoBuyTab = Window:NewTab("Auto Buy")
local AutoBuySection = AutoBuyTab:NewSection("Automatically buys lollipops or pets")

local autoBuyLollipops = false

AutoBuySection:NewToggle("Auto Buy Lollipops", "Buys lollipops without you moving a finger.", function(state)
    autoBuyLollipops = state
    if state then
        task.spawn(function()
            while autoBuyLollipops do
                local args = {
                    "Levelup Lollipop"
                }
                game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("BuyGearStock"):FireServer(unpack(args))
                task.wait(1)
            end
        end)
    end
end)

--// Player Tab
local playerTab = Window:NewTab("Player")
local playerSection = playerTab:NewSection("Player Settings")

local Player = game:GetService("Players").LocalPlayer
local UIS = game:GetService("UserInputService")
local Character = Player.Character or Player.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")

playerSection:NewSlider("WalkSpeed", "Change your walking speed", 500, 16, function(value)
    if Player.Character and Player.Character:FindFirstChildOfClass("Humanoid") then
        Player.Character:FindFirstChildOfClass("Humanoid").WalkSpeed = value
    end
end)

_G.JumpHeight = 50
playerSection:NewSlider("JumpHeight", "Change your jump height", 500, 50, function(value)
    _G.JumpHeight = value
end)

local infJumpEnabled = false
playerSection:NewToggle("Infinite Jump", "Enable infinite jump", function(state)
    infJumpEnabled = state
end)

UIS.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if infJumpEnabled and input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == Enum.KeyCode.Space then
        local humanoid = Player.Character and Player.Character:FindFirstChildOfClass("Humanoid")
        if humanoid and (humanoid:GetState() == Enum.HumanoidStateType.Jumping or humanoid:GetState() == Enum.HumanoidStateType.Freefall) then
            local rootPart = humanoid.Parent:FindFirstChild("HumanoidRootPart")
            if rootPart then
                rootPart.Velocity = Vector3.new(0, _G.JumpHeight, 0)
            end
            humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        end
    end
end)

task.spawn(function()
    task.wait(5)
    if _G.AutoEggEnabled then
        notify("Auto Egg Automation resuming after rejoin...")
        autoEgg = true
        EggSection:UpdateToggle("Run Egg Automation", true)
    end
end)
