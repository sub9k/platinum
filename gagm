-- Load Kavo UI Library
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("Egg Automation Script", "DarkTheme")

-- Create Egg Automation Tab & Section
local EggTab = Window:NewTab("Egg Automation")
local EggSection = EggTab:NewSection("Auto Egg Process")

-- State variables
local autoEgg = false
local selectedEgg = nil

-- Notification function
local function notify(msg)
    pcall(function()
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Egg Automation",
            Text = msg,
            Duration = 2
        })
    end)
end

-- Equip tool function
local function equipEgg(namePart)
    local player = game.Players.LocalPlayer
    local backpack = player:WaitForChild("Backpack")
    local character = player.Character or player.CharacterAdded:Wait()

    -- Find any tool that contains the egg name
    local tool
    for _, t in ipairs(backpack:GetChildren()) do
        if t:IsA("Tool") and t.Name:find(namePart) then
            tool = t
            break
        end
    end

    if tool then
        tool.Parent = character -- move to character
        character:WaitForChild("Humanoid"):EquipTool(tool) -- equip
        return true
    end
    return false
end

-- Function to get eggs from Backpack
local function getEggs()
    local player = game.Players.LocalPlayer
    local backpack = player:WaitForChild("Backpack")
    local eggs = {}

    for _, tool in ipairs(backpack:GetChildren()) do
        if tool:IsA("Tool") then
            local name = tool.Name
            if name:find("Egg") and not name:find("Easter Egg seed") then
                table.insert(eggs, name)
            end
        end
    end

    return eggs
end

-- Create dropdown dynamically
local eggDropdown = EggSection:NewDropdown("Select Egg", "Select an egg to automate", getEggs(), function(option)
    selectedEgg = option
end)

-- Optional: refresh dropdown when UI opens
eggDropdown:Refresh(getEggs())

-- Toggle for automation
EggSection:NewToggle("Run Egg Automation", "Equips and processes selected egg continuously", function(state)
    autoEgg = state

    task.spawn(function()
        while autoEgg do
            if not selectedEgg then
                notify("No egg selected!")
                task.wait(2)
                continue
            end

            -- Equip selected egg
            notify("Equipping: " .. selectedEgg)
            if not equipEgg(selectedEgg) then
                notify("Could not find " .. selectedEgg .. " in Backpack!")
                task.wait(2)
                continue
            end

            -- Step 1: CreateEgg 8 times
            for i = 1, 8 do
                local args = {
                    "CreateEgg",
                    vector.create(60.230186462402344, 0.1754859983921051, -112.32734680175781)
                }
                game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("PetEggService"):FireServer(unpack(args))
                task.wait(0.1)
            end
            notify("Created 8 eggs")

            -- Step 2: AuthorisePurchase for each PetEgg
            local petEggs = {}
            local farmPath = workspace:WaitForChild("Farm"):WaitForChild("Farm"):WaitForChild("Important"):WaitForChild("Objects_Physical")
            for _, obj in ipairs(farmPath:GetChildren()) do
                if obj.Name == "PetEgg" then
                    table.insert(petEggs, obj)
                end
            end

            for _, egg in ipairs(petEggs) do
                local args = {
                    "AuthorisePurchase",
                    egg
                }
                game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("PetEggService"):FireServer(unpack(args))
                task.wait(0.1)
            end
            notify("Authorised " .. #petEggs .. " eggs")

            -- Step 3: HatchPet for each PetEgg
            for _, egg in ipairs(petEggs) do
                local args = {
                    "HatchPet",
                    egg
                }
                game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("PetEggService"):FireServer(unpack(args))
                task.wait(0.1)
            end
            notify("Hatched " .. #petEggs .. " eggs")

            task.wait(1) -- wait before next loop
        end
        notify("Egg Automation stopped")
    end)
end)
